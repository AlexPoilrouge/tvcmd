#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys, os
import logging
import argparse


# use for debugging only, launches the python interactive shell in the middle of a tvcmd session
def interactive():
    import readline
    import rlcompleter
    readline.parse_and_bind("tab: complete")
    
    import code
    print("\nLaunching python interactive shell ...\n")
    code.interact(local=globals())

def main():
    parser = argparse.ArgumentParser(description = "tvcmd command line tv episodes tracker")
    
    parser.add_argument("-e", "--execute", default=None, metavar="COMMAND", help="execute COMMAND and exit")
    parser.add_argument("-f", "--format", action="store_true", help="print formated episodes and exit")
    parser.add_argument("-v", "--version", action="store_true", help="print version info and exit")
    parser.add_argument("--help-conf", action="store_true", help="print help on how to configure")
    
    args = parser.parse_args()
    
    # print configuration help
    if args.help_conf:
        import tvcmd.cons
        help = ('\nPaths:\n'
                ' config: %s\n'
                ' status-db: %s\n'
                ' cache: %s\n'
                '\nExample Config:\n'
                '[general]\n'
                'shows = an_idiot_abroad, the_office_us, lost\n'
                'formats = https://torrentz.eu/verified?f=${show+}+s${season}e${episode}\n'
                'source = tvrage\n')
        print(help %(tvcmd.cons.MAINCONFIGFILE, tvcmd.cons.STATUSDBFILE, tvcmd.cons.CACHEFILE))
        return
    
    import tvcmd.shell
    ui = tvcmd.shell.Shell()
    ui.load()
    
    # prints formated urls and exits
    if args.format:
        ui.onecmd("format *")
        ui.exit()
        return
    
    # prints version info and exits
    if args.version:
        ui.onecmd("version")
        ui.exit()
        return
    
    # executes one single command and exits
    if args.execute:
        ui.onecmd(args.execute)
        ui.exit()
        return
    
    # executes in shell mode
    ui.cmdloop()
    
if __name__ == "__main__":
    
    # DEBUG mode
    if os.environ.get("DEBUG"):
        print("Running on DEBUG mode")
        
        logging.basicConfig(level=logging.DEBUG)
        sys.path.insert(0, os.path.dirname(__file__)+"/..")
        
        import tvcmd.cons
        tvcmd.cons.MAINCONFIGFILE = tvcmd.cons.CONFIGDIR + "_debug/main.cfg"
        tvcmd.cons.STATUSDBFILE = tvcmd.cons.CONFIGDIR + "_debug/status.db"
        tvcmd.cons.CACHEFILE = tvcmd.cons.CONFIGDIR + "_debug/cache.db"
        
        import traceback
        try: main()
        except SystemExit: pass
        except: traceback.print_exc()
        
        # interactive()
        
    # NORMAL mode
    else:
        
        logging.basicConfig(level=logging.INFO)
        main()
        sys.exit(0)
